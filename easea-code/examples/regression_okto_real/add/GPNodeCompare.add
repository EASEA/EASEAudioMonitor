/////////////////// BEGIN TREE COMPARE /////////////////////
// Cette fonction n'est pas au point, elle ne traite pas la division.
bool GPNodeCompare(GPNode* root1, GPNode* root2, const unsigned* opArity) {
    
    char code1 = root1->opCode;
    char code2 = root2->opCode;
    int arity1 = opArity[(int)code1];
    int arity2 = opArity[(int)code2];

    if (code1 != code2) return false;

    // Compare terminal nodes
    // They can be equal if they have the same opCode and if they the same value in case of the opCode is OP_ERC
    if (!arity1) {
	if (code1 == OP_ERC && root1->erc_value != root2->erc_value) return false;
	return true;
    }

    // Compare non-terminal nodes.
    // They can be equal if the children of the first node are a permutation of those of second node.

    int length = arity2;
    int index[length];
    // Initialization of the index array.
    for (int i = 0; i < length; i++) {
	index[i] = i;
    }

    for (int i = 0; i < arity1; i++) {
	int j = 0;
	while (!GPNodeCompare(root1->children[i], root2->children[index[j]], opArity)) {
	    if (++j >= length) return false; // If at the end of the index array we didn't found an equal children, we return false.
	}
	
	// The children are equal, so the current index is discarded from the research.
	index[j] = index[--length];
    }

    return true;
}

////////////////// END TREE COMPARE ////////////////////////