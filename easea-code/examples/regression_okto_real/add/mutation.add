/////////////////////// BEGIN UPDATE PMUT ////////////////////
void updatePMut() {

#if defined MUTATOR && MUTATOR==3

#if PMUTVAR==1
    float fitness = EA->population->Best->fitness;
    if (previousFitness-fitness < previousFitness*pMutThreshold ) nbFlatGen++;
    else nbFlatGen = 0;
    
    previousFitness = fitness;
    
    if (nbFlatGen > flatGenMax) {
	EA->population->pMutationPerGene *= pMutUp;
	EA->population->pMutationPerGene = min(EA->population->pMutation, 1.f);
    }
    else EA->population->pMutationPerGene *= pMutDown;

    //printf("mutation probability: %f, flat generation: %d\n", EA->population->pMutation, nbFlatGen);
#else
    EA->population->pMutationPerGene = pMutInit/(pMutRatio*EA->getCurrentGeneration());
#endif

#else

#if PMUTVAR==1
    float fitness = EA->population->Best->fitness;
    if (previousFitness-fitness < previousFitness*pMutThreshold ) nbFlatGen++;
    else nbFlatGen = 0;
    
    previousFitness = fitness;
    
    if (nbFlatGen > flatGenMax) {
	EA->population->pMutation *= pMutUp;
	EA->population->pMutation = min(EA->population->pMutation, 1.f);
    }
    else EA->population->pMutation *= pMutDown;

    //printf("mutation probability: %f, flat generation: %d\n", EA->population->pMutation, nbFlatGen);
#else
    EA->population->pMutation = pMutInit/(pMutRatio*EA->getCurrentGeneration());
#endif

#endif // defined MUTATOR && MUTATOR==3

}
//////////////////////// END UPDATE PMUT /////////////////////
