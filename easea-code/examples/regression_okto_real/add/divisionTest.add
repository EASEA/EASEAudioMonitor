///////////////////// BEGIN DIVISION TEST ////////////////////

bool isDivisionValid(GPNode* root, const unsigned* opArity, bool evaluationAsked, double* alpha, double* beta) {

    double phi1 = -1, phi2 = 1.;       // range of values for phi
    double psi1 = -1., psi2 = 1.;      // range of values for psi
    double teta1 = -1., teta2 = 1.;    // range of values for teta
    double dphi1 = -1., dphi2 = 1.;     // range of values for dphi
    double dpsi1 = -1., dpsi2 = 1.;     // range of values for dpsi
    double dteta1 = -1., dteta2 = 1.;   // range of values for dteta
    double u11 = 0., u12 = 1.;          // range of values for u1
    double u21 = 0., u22 = 1.;          // range of values for u2
    double u31 = 0., u32 = 1.;          // range of values for u3
    double u41 = 0., u42 = 1.;          // range of values for u4

    char code = root->opCode;

    if (opArity[(int)code] == 2) {
	if (!isDivisionValid(root->children[0], opArity, evaluationAsked, alpha, beta)) return false;
	//printf("%d left child is valid\n", (int)code);
	double a0, b0, a1, b1;
	if (evaluationAsked) {
	    a0 = *alpha;
	    b0 = *beta; // range of value for children[0]
	}
	bool eval = evaluationAsked;
	if (code == OP_DIV) eval = true;
	if (!isDivisionValid(root->children[1], opArity, eval, alpha, beta)) return false;
	//printf("%d right child is valid\n", (int)code);
	if (code == OP_DIV && *alpha <= 0 && *beta >= 0) return false;
	if (evaluationAsked) {
	    a1 = *alpha;
	    b1 = *beta; // range of value for children[1] 
	} else return true;

	// alpha and beta are set for each operator.

	if (code == OP_ADD) {
	    *alpha = a0 + a1;
	    *beta = b0 + b1;
	    //printf("[%f, %f] + [%f, %f] -> [%f, %f]\n", a0, b0, a1, b1, *alpha, *beta);
	}
	else if (code == OP_SUB) {
	    *alpha = a0 - b1;
	    *beta = b0 - a1;
	    //printf("[%f, %f] - [%f, %f] -> [%f, %f]\n", a0, b0, a1, b1, *alpha, *beta);
	}
	else if (code == OP_MUL) {
	    double a0a1 = a0 * a1;
	    double a0b1 = a0 * b1;
	    double b0a1 = b0 * a1;
	    double b0b1 = b0 * b1;
	    *alpha = min(min(a0a1, a0b1), min(b0a1, b0b1));
	    *beta = max(max(a0a1, a0b1), max(b0a1, b0b1));

	    //printf("[%f, %f] * [%f, %f] -> [%f, %f]\n", a0, b0, a1, b1, *alpha, *beta);

	    // More complex version with less multiplications but more tests to perform.
	    // if (a0 < 0 && b0 > 0 && a1 < 0 && b1 > 0) {
	    // 	*alpha = min(a0*b1, b0*a1);
	    // 	*beta = max(a0*a1, b0*b1);
	    // } else {
	    // 	if (a0 < 0 && b1 > 0) *alpha = a0*b1;
	    // 	else if (b0 > 0 && a1 < 0) *alpha = b0*a1;
	    // 	else if (a0 > 0) *alpha = a0*a1;
	    // 	else if (b0 < 0) *alpha = b0*b1;
	    // 	else return false; // Should not happen all cases are covered.
	    // 	if (b0 > 0 && b1 > 0) *beta = b0*b1;
	    // 	else if (a0 < 0 && a1 < 0) *beta = a0*a1;
	    // 	else if (b0 < 0) *beta = b0*a1;
	    // 	else if (a0 > 0) *beta = a0*b1;
	    // 	else return false; // Should not happen all cases are covered.
	    // }
	}
	else if (code == OP_DIV) {
	    double a0a1 = a0 / a1;
	    double a0b1 = a0 / b1;
	    double b0a1 = b0 / a1;
	    double b0b1 = b0 / b1;
	    *alpha = min(min(a0a1, a0b1), min(b0a1, b0b1));
	    *beta = max(max(a0a1, a0b1), max(b0a1, b0b1));

	    //printf("[%f, %f] รท [%f, %f] -> [%f, %f]\n", a0, b0, a1, b1, *alpha, *beta);

	    // More complex version with less divisions but more tests to perform.
	    // if (a0 < 0 && b0 > 0 && a1 < 0 && b1 > 0) {
	    // 	*alpha = min(a0/b1, b0/a1);
	    // 	*beta = max(a0/a1, b0/b1);
	    // } else {
	    // 	if (a0 < 0 && a1 > 0) *alpha = a0/a1;
	    // 	else if (b0 > 0 && b1 < 0) *alpha = b0/b1;
	    // 	else if (a1 < 0 && (a0 < 0 == b0 < 0)) *alpha = b0/a1;
	    // 	else if (b1 > 0 && (a0 < 0 == b0 < 0)) *alpha = a0/b1;
	    //  else return false;  // Should not happen all cases are covered.
	    // 	if (a1 > 0 && b0 > 0) *beta = b0/a1;
	    // 	else if (a0 < 0 && b1 < 0) *beta = a0/b1;
	    // 	else if (b1 > 0 && (a0 < 0 == b0 < 0)) *beta = b0/b1;
	    // 	else if (a1 < 0 && (a0 < 0 == b0 < 0)) *beta = a0/a1;
	    //  else return false;  // Should not happen all cases are covered.
	    // }
	}

#ifdef SINCOS
    } else if (opArity[(int)code] == 1) {
     	if (!isDivisionValid(root->children[0], opArity, alpha, beta)) return false;
	
     	if (code == OP_SIN) {
    	    *alpha = sin(fmod(*alpha, 2*3.1415925535));
    	    *beta = sin(fmod(*beta, 2*3.1415925535));
    	}
    	else if (code == OP_COS) {
    	    *alpha = cos(fmod(*alpha, 2*3.1415925535));
    	    *beta = cos(fmod(*beta, 2*3.1415925535));
    	}
#endif

    } else if (!opArity[(int)code]) {   // Cases of terminal nodes. alpha and beta are set.
	if (!evaluationAsked) return true;
	if (code == OP_ERC) {*alpha = root->erc_value; *beta = root->erc_value;}
	else if (code == OP_PHI) {*alpha = phi1; *beta = phi2;}
	else if (code == OP_PSI) {*alpha = psi1; *beta = psi2;}
	else if (code == OP_TETA) {*alpha = teta1; *beta = teta2;}
	else if (code == OP_DPHI) {*alpha = dphi1; *beta = dphi2;}
	else if (code == OP_DPSI) {*alpha = dpsi1; *beta = dpsi2;}
	else if (code == OP_DTETA) {*alpha = dteta1; *beta = dteta2;}
	else if (code == OP_U1) {*alpha = u11; *beta = u12;}
	else if (code == OP_U2) {*alpha = u21; *beta = u22;}
	else if (code == OP_U3) {*alpha = u31; *beta = u32;}
	else if (code == OP_U4) {*alpha = u41; *beta = u42;}

    } else return false; // Should not happen because we don't consider other arities.

    return true;

}

////////////////////// END DIVISION TEST /////////////////////

#ifdef DIVPENALTY
////////////////////// BEGIN TEST POPULATION /////////////////////

void populationDivisionValidity() {

    if (genWithoutDivTest > 0) {
	genWithoutDivTest--;
	return;
    }

    double alpha;
    double beta;
    int popSize = EA->population->offspringPopulationSize;
    IndividualImpl** childPop = (IndividualImpl**)EA->population->offsprings;
    int nbPenalizedTree = 0;

#if DIVPENALTY==2 || DIVPENALTY==3 || DIVPENALTY==4
    float penalty;
#if DIVPENALTY==2
    penalty = divPenaltyMult;
#elif DIVPENALTY==3
    float t = EA->getCurrentGeneration()/EA->params->nbGen;
#elif DIVPENALTY==4
    float t = (float)previousNbPenalizedTree / (popSize*nbInvalidTreePenaltyThreshold);
    t = min(t, 1.f);
#endif
#if DIVPENALTY==3 || DIVPENALTY==4
    penalty = divPenaltyProgInit*(1.-t)+divPenaltyProgFinal*t;
#endif
#endif

    for (int i = 0; i < popSize; i++) {
	if (!isDivisionValid(childPop[i]->root, opArity, false, &alpha, &beta)) {
#if DIVPENALTY==1
	    (childPop[i])->fitness += divPenaltyInc;
#elif DIVPENALTY==2 || DIVPENALTY==3 || DIVPENALTY==4
	    (childPop[i])->fitness *= penalty;
#elif DIVPENATY==5
	    (childPop[i])->root = ramped_hh();
#else
	    (childPop[i])->fitness = divPenaltyKill;
#endif
	    nbPenalizedTree++;
	}
    }

#if DIVPENALTY==4
    previousNbPenalizedTree = nbPenalizedTree;
#endif
    
    if (nbPenalizedTree > popSize*nbInvalidTreeTestThreshold) {
	genWithoutDivTest = 0;
    } else {
	float t = (float)nbPenalizedTree / (popSize*nbInvalidTreeTestThreshold);
	genWithoutDivTest = (int)(maxGenWithoutDivTest*(1-t) + t + 0.5);
	printf("%d generation(s) skipped.\n", genWithoutDivTest);
    }

    printf("penalty for %d individuals\n", nbPenalizedTree);

}

///////////////////////// END TEST POPULATION ///////////////////
#endif

///////////////////////// BEGIN DIVISION TREE /////////////////////////

// Creates the tree:
// phi*dphi + frac{teta+dteta, psi*dpsi - u1/u2} - ERC*frac{u3*u4, phi/psi}


GPNode* divTree() {
    GPNode* root = new GPNode();
    root->opCode = OP_ADD;

    GPNode* root1 = new GPNode();
    root1->opCode = OP_MUL;
    root->children[0] = root1;

    GPNode* root2 = new GPNode();
    root2->opCode = OP_SUB;
    root->children[1] = root2;

    // ROOT1    

    GPNode* root11 = new GPNode();
    root11->opCode = OP_PHI;
    root11->children[0] = NULL;
    root11->children[0] = NULL;
    root1->children[0] = root11;

    GPNode* root12 = new GPNode();
    root12->opCode = OP_DPHI;
    root12->children[0] = NULL;
    root12->children[0] = NULL;
    root1->children[1] = root12;

    // ROOT2

    GPNode* root21 = new GPNode();
    root21->opCode = OP_DIV;
    root2->children[0] = root21;

    GPNode* root22 = new GPNode();
    root22->opCode = OP_MUL;
    root2->children[1] = root22;

    // ROOT21

    GPNode* root211 = new GPNode();
    root211->opCode = OP_ADD;
    root21->children[0] = root211;

    GPNode* root212 = new GPNode();
    root212->opCode = OP_SUB;
    root21->children[1] = root212;

    // ROOT 211

    GPNode* root2111 = new GPNode();
    root2111->opCode = OP_TETA;
    root2111->children[0] = NULL;
    root2111->children[1] = NULL;
    root211->children[0] = root2111;

    GPNode* root2112 = new GPNode();
    root2112->opCode = OP_DTETA;
    root2112->children[0] = NULL;
    root2112->children[1] = NULL;
    root211->children[1] = root2112;

    // ROOT 212

    GPNode* root2121 = new GPNode();
    root2121->opCode = OP_MUL;
    root212->children[0] = root2121;

    GPNode* root2122 = new GPNode();
    root2122->opCode = OP_DIV;
    root212->children[1] = root2122;

    // ROOT 2121

    GPNode* root21211 = new GPNode();
    root21211->opCode = OP_PSI;
    root21211->children[0] = NULL;
    root21211->children[1] = NULL;
    root2121->children[0] = root21211;

    GPNode* root21212 = new GPNode();
    root21212->opCode = OP_DPSI;
    root21212->children[0] = NULL;
    root21212->children[1] = NULL;
    root2121->children[1] = root21212;

    // ROOT 2122
    
    GPNode* root21221 = new GPNode();
    root21221->opCode = OP_U1;
    root21221->children[0] = NULL;
    root21221->children[1] = NULL;
    root2122->children[0] = root21221;

    GPNode* root21222 = new GPNode();
    root21222->opCode = OP_U2;
    root21222->children[0] = NULL;
    root21222->children[1] = NULL;
    root2122->children[1] = root21222;

    // ROOT22

    GPNode* root221 = new GPNode();
    root221->opCode = OP_ERC;
    root221->erc_value = -13.234;
    root221->children[0] = NULL;
    root221->children[1] = NULL;
    root22->children[0] = root221;

    GPNode* root222 = new GPNode();
    root222->opCode = OP_DIV;
    root22->children[1] = root222;

    // ROOT222

    GPNode* root2221 = new GPNode();
    root2221->opCode = OP_MUL;
    root222->children[0] = root2221;

    GPNode* root2222 = new GPNode();
    root2222->opCode = OP_DIV;
    root222->children[1] = root2222;

    // ROOT2221

    GPNode* root22211 = new GPNode();
    root22211->opCode = OP_U3;
    root22211->children[0] = NULL;
    root22211->children[1] = NULL;
    root2221->children[0] = root22211;

    GPNode* root22212 = new GPNode();
    root22212->opCode = OP_U4;
    root22212->children[0] = NULL;
    root22212->children[1] = NULL;
    root2221->children[1] = root22212;

    //ROOT2222

    GPNode* root22221 = new GPNode();
    root22221->opCode = OP_PHI;
    root22221->children[0] = NULL;
    root22221->children[1] = NULL;
    root2222->children[0] = root22221;

    GPNode* root22222 = new GPNode();
    root22222->opCode = OP_PSI;
    root22222->children[0] = NULL;
    root22222->children[1] = NULL;
    root2222->children[1] = root22222;

    return root;
}

///////////////////////// END DIVISION TREE ///////////////////////
