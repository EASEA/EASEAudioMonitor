/////////////////////// BEGIN CROSSOVER 1 ////////////////////////
void crossOver1(IndividualImpl& p1, IndividualImpl& p2, IndividualImpl& c){

    GPNode* parent1Node = selectNode1(c.root);
    int depthOfP1Node = depthOfNodeInTree(c.root, parent1Node);
    if (depthOfP1Node <= 0 || depthOfP1Node > TREE_DEPTH_MAX) return; // error
    GPNode* parent2Node = selectNode1(p2.root, 0, TREE_DEPTH_MAX-depthOfP1Node+1);

    delete parent1Node->children[0];
    delete parent1Node->children[1];
    parent1Node->opCode = parent2Node->opCode;
    parent1Node->erc_value = parent2Node->erc_value;
    parent1Node->children[0] = parent2Node->children[0];
    parent1Node->children[1] = parent2Node->children[1];
    parent2Node->children[0] = NULL;
    parent2Node->children[1] = NULL;
    
}
/////////////////////// END CROSSOVER 1 //////////////////////////

////////////////////// BEGIN CROSSOVER ///////////////////////
void crossOver(IndividualImpl& p1, IndividualImpl& p2, IndividualImpl& c){

    //GPNode* c1 = new GPNode(*(c.root));

    crossOver1(p1, p2, c);

    //cross++;
    //if (GPNodeCompare(c.root, c1)) crossClone++;
    //delete c1;

}
////////////////////// END CROSSOVER ////////////////////////
