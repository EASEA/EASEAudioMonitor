////////////////////////// BEGIN NORMALIZATION //////////////////
#ifdef NORMALIZATION
float* normalizationCoeff;
#endif
/////////////////////////// END NORMALIZATION ///////////////////

////////////////////////// BEGIN PMUT //////////////////////////
#if defined PMUTVAR
std::ostringstream pMutVarDesc;
#if PMUTVAR==1
float previousFitness = 0.;

#if defined MUTATOR && MUTATOR==3
float pMutInit = 0.02;  // Initial probability.
#else
float pMutInit = 0.5;  // Initial probability.
#endif

float pMutUp = 1.1;    // Coefficient by witch the mutation probability
                       // is multiply when the population does not progress.
                       // Should be greater than 1.
float pMutDown = 0.9;  // Coefficient by witch the mutation probability
                       // is multiply when the population progresses.
                       // Should be lower than 1.
int flatGenMax = 5;    // Number of generation with no progression
                       // before increasing mutation probablility.
float pMutThreshold = 0.0005; // Relative threshold to determine whether or
                              // not the finess is flat.
int nbFlatGen = 0;
#else

#if defined MUTATOR && MUTATOR==3
float pMutInit = 0.02;  // Initial probability.
#else
float pMutInit = 0.5;  // Initial probability.
#endif

float pMutRatio = 1.;  // pMutInit is divided by pMutRatio*nbGen.
#endif
#endif
/////////////////////////// END PMUT /////////////////////////

////////////////////// BEGIN DIVISION PENALTY ////////////////////
#ifdef DIVPENALTY
std::ostringstream divPenaltyDesc;
int genWithoutDivTest = 0;     // Remaining number of generation without
                               // performing the test for division.
int maxGenWithoutDivTest = 5;  // Maximum generation without test.
float nbInvalidTreeTestThreshold = 0.005;  // Relative number of maximum invalids
                                    // individuals to avoid test
#if DIVPENALTY==1
float divPenaltyInc = 1.;
#elif DIVPENALTY==2
float divPenaltyMult = 2.;
#elif DIVPENALTY==3 || DIVPENALTY==4
float divPenaltyProgInit = 2.;
float divPenaltyProgFinal = 10.;
#if DIVPENALTY==4
int previousNbPenalizedTree;
float nbInvalidTreePenaltyThreshold = 0.05;
#endif
#elif DIVPENALTY==5
#else
float divPenaltyKill = 1000.;
#endif
#endif
////////////////////////// END DIVISION PENALTY //////////////////

///////////////////////// BEGIN FILES2 ////////////////////////
#ifdef FILES2
float** inputs1;
float** inputs2;
float* output1;
float* output2;
#endif
///////////////////////// END FILES2 //////////////////////////

///////////////////////// BEGIN FITNESS ///////////////////////
std::ostringstream fitnessDesc;
////////////////////////// END FITNESS ////////////////////////

//////////////////////// BEGIN MUTATOR ///////////////////////
std::ostringstream mutatorDesc;
///////////////////////// END MUTATOR ////////////////////////

/////////////////////// BEGIN SET PARAMETERS //////////////////////
void setParam() {
#ifdef PMUTVAR
    EA->population->pMutation = pMutInit;
#endif

#if MUTATOR==3
    EA->population->pMutation = 1.;
    EA->population->pMutationPerGene = 0.0005;
#endif
}
//////////////////////// END SET PARAMETERS ///////////////////////

//////////////////////// BEGIN STATS //////////////////////////
int mut = 0;
int cross = 0;
int mutClone = 0;
int crossClone = 0;
///////////////////////// END STATS ///////////////////////////
