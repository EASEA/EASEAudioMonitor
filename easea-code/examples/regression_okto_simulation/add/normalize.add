////////////////////// BEGIN NORMALIZE DATA //////////////////////

void normalizeData(float*** inputArrs, float** normalizationCoeff, int numberOfCases, int varLen) {

    // Initializes the array of the coefficient.
    (*normalizationCoeff) = (float*)malloc((varLen-2)*sizeof(float));
    
    for (int col = 1; col < varLen; col++) {

	// Looks for the maximum in absolute value in the column.
	float max = 0.;
	for (int i = 0; i < numberOfCases; i++) {
	    if (fabs((*inputArrs)[i][col]) > max) max = fabs((*inputArrs)[i][col]);
	}
	
	// Normalizes the column.
	for (int i = 0; i < numberOfCases; i++) {
	    (*inputArrs)[i][col] = (*inputArrs)[i][col] / max;
	}

	// Puts the coefficient in the array.
	(*normalizationCoeff)[col-1] = max;

    }

}

///////////////////// END NORMALIZE DATA /////////////////////

///////////////////// BEGIN CREATE NORMALIZED TREE ////////////////////

GPNode* createNormalizedTree(GPNode* root, const unsigned* opArity, float* coeff) {

    GPNode* nRoot = (GPNode*)malloc(sizeof(GPNode));
    char code = root->opCode;

    if (opArity[(int)code] == 2) {
	nRoot->opCode = code;
	nRoot->children[0] = createNormalizedTree(root->children[0], opArity, coeff);
	nRoot->children[1] = createNormalizedTree(root->children[1], opArity, coeff);
    } else if (opArity[(int)code] == 0) {
	if (code == OP_ERC) {
	    nRoot->opCode = OP_ERC;
	    nRoot->erc_value = root->erc_value;
	    nRoot->children[0] = NULL;
	    nRoot->children[1] = NULL;
	} else {
	    nRoot->opCode = OP_MUL;

	    nRoot->children[0] = (GPNode*)malloc(sizeof(GPNode));
	    nRoot->children[0]->opCode = code;
	    nRoot->children[0]->children[0] = NULL;
	    nRoot->children[0]->children[1] = NULL;

	    nRoot->children[1] = (GPNode*)malloc(sizeof(GPNode));
	    nRoot->children[1]->opCode = OP_ERC;

	    nRoot->children[1]->erc_value = 1/coeff[(int)code];

	    nRoot->children[1]->children[0] = NULL;
	    nRoot->children[1]->children[1] = NULL;
	}
    } else return NULL; // Other trees cannot be normalized.

    return nRoot;

}

////////////////////// END CREATE NORMALIZED TREE /////////////////////

///////////////////// BEGIN NORMALIZE TREE ////////////////////

void normalizeTree(GPNode* root, const unsigned* opArity, float* coeff) {

    char code = root->opCode;

    if (opArity[(int)code] == 2) {
	normalizeTree(root->children[0], opArity, coeff);
	normalizeTree(root->children[1], opArity, coeff);
    } else if (opArity[(int)code] == 0 && code != OP_ERC) {
	root->opCode = OP_MUL;
	
	root->children[0] = (GPNode*)malloc(sizeof(GPNode));
	root->children[0]->opCode = code;
	root->children[0]->children[0] = NULL;
	root->children[0]->children[1] = NULL;
	
	root->children[1] = (GPNode*)malloc(sizeof(GPNode));
	root->children[1]->opCode = OP_ERC;

	root->children[1]->erc_value = 1/coeff[(int)code];

	root->children[1]->children[0] = NULL;
	root->children[1]->children[1] = NULL;
    }

}

////////////////////// END NORMALIZE TREE /////////////////////
